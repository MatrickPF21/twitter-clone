// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Tweet {
  id     String @id @default(cuid())
  text   String
  userId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes Like[]

  // aproximated counts
  likesCounter Int @default(0)

  createadAt DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
}

model Like {
  tweetId String
  userId  String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  Tweet Tweet @relation(fields: [tweetId], references: [id])

  @@id([tweetId, userId])
  @@index([userId])
  @@index([tweetId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?   @db.VarChar(50)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  screenName  String? @unique @db.VarChar(15)
  description String?
  verified    Boolean @default(false)
  tweets      Tweet[]
  Like        Like[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
